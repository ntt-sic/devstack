# Neutron Metaplugin for Linuxbridge agent and Open vSwitch L2 agent
# ------------------------------------------------------------------

# Save trace setting
PLUGIN_XTRACE=$(set +o | grep xtrace)
set +o xtrace

source $TOP_DIR/lib/neutron_plugins/metaplugin_linuxbridge_agent
source $TOP_DIR/lib/neutron_plugins/metaplugin_openvswitch_agent

function is_neutron_ovs_base_plugin() {
    # Yes, we use OVS.
    return 0
}

function neutron_plugin_create_nova_conf() {
    linuxbridge_plugin_create_nova_conf
	openvswitch_plugin_create_nova_conf
}

function neutron_plugin_install_agent_packages() {
    linuxbridge_plugin_install_agent_packages
	openvswitch_plugin_install_agent_packages
}

function neutron_plugin_configure_debug_command() {
    linuxbridge_plugin_configure_debug_command
}

function neutron_plugin_configure_dhcp_agent() {
    linuxbridge_plugin_configure_dhcp_agent
}

function neutron_plugin_configure_l3_agent() {
    linuxbridge_plugin_configure_l3_agent
}

function neutron_plugin_configure_plugin_agent() {

  if [[ $PLUGINS_FOR_METAPLUGIN_CONF_PATH != '' ]]; then
        local f
		local PLUGINS_FOR_METAPLUGIN_CONF_FILE
        for (( f=0; $f < ${#PLUGINS_FOR_METAPLUGIN_CONF_FILES[@]}; f+=1 )); do
            PLUGINS_FOR_METAPLUGIN_CONF_FILE=$PLUGINS_FOR_METAPLUGIN_CONF_PATH/${PLUGINS_FOR_METAPLUGIN_CONF_FILES[$f]}

			# ml2 setting
			echo ${PLUGINS_FOR_METAPLUGIN_CONF_FILE} | grep 'ml2'
			if [ "$?" -eq 0 ]; then
    		    linuxbridge_plugin_configure_plugin_agent ${PLUGINS_FOR_METAPLUGIN_CONF_FILE}
			fi
			
 			# Openvswitch setting
			echo ${PLUGINS_FOR_METAPLUGIN_CONF_FILE} | grep 'openvswitch'
			if [ "$?" -eq 0 ]; then
			    openvswitch_plugin_configure_plugin_agent ${PLUGINS_FOR_METAPLUGIN_CONF_FILE}
			fi
        done
    fi
   
}

function neutron_plugin_setup_interface_driver() {
    local conf_file=$1
    iniset $conf_file DEFAULT interface_driver neutron.agent.linux.interface.MetaInterfaceDriver
	iniset $conf_file DEFAULT meta_flavor_driver_mappings openvswitch:neutron.agent.linux.interface.OVSInterfaceDriver,ml2:neutron.agent.linux.interface.BridgeInterfaceDriver
}

function neutron_plugin_check_adv_test_requirements() {
    is_service_enabled q-agt && is_service_enabled q-dhcp && return 0
}

# Restore xtrace
$PLUGIN_XTRACE
